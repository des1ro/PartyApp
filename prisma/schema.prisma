generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid        String       @id @default(uuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  email       String       @unique
  phoneNumber String       @unique
  picture     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        Role         @default(USER)
  Trip        Trip[]
  Comment     Comment[]
  UserToTrip  UserToTrip[]
  expenses    Expenses[]
  likedTrips  Like[]
  friends     Friendship[] @relation("UserFriends")
  friendOf    Friendship[] @relation("UserFriendOf")
}

model Friendship {
  id       Int    @id @default(autoincrement())
  status   String
  user     User   @relation("UserFriends", fields: [userId], references: [uuid])
  userId   String
  friend   User   @relation("UserFriendOf", fields: [friendId], references: [uuid])
  friendId String

  @@unique([userId, friendId])
}

enum Role {
  USER
  ADMIN
}

model Trip {
  uuid         String       @id @default(uuid())
  title        String       @unique
  place        String[]
  published    Boolean      @default(true)
  author       User         @relation(fields: [authorTripId], references: [uuid])
  authorTripId String
  attractions  String[]
  pictures     String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  startOfTrip  DateTime?
  endOfTrip    DateTime?
  views        Int          @default(0)
  likes        Like[]
  category     String[]
  expenses     Expenses[]
  comments     Comment[]
  UserToTrip   UserToTrip[]
  isInProgress Boolean?     @default(false)
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  tripId    String
  createdAt DateTime @default(now())

  // Relacje do u≈ºytkownika i wycieczki
  user User @relation(fields: [userId], references: [uuid])
  trip Trip @relation(fields: [tripId], references: [uuid])

  @@unique([userId, tripId])
}

model Expenses {
  id          String   @id @default(uuid())
  amount      Float
  description String
  picture     String[]
  user        User     @relation(fields: [userId], references: [uuid])
  userId      String
  trip        Trip     @relation(fields: [tripId], references: [uuid])
  tripId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  authorId  String
  comment   String
  author    User     @relation(fields: [authorId], references: [uuid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Trip      Trip?    @relation(fields: [tripId], references: [uuid])
  tripId    String?
}

model UserToTrip {
  userId String
  user   User   @relation(fields: [userId], references: [uuid])
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [uuid])

  @@id([userId, tripId])
}
