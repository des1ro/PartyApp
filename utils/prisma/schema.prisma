generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid        String        @id @default(uuid())
  name        String
  dateOfBirth Int?
  email       String        @unique
  phoneNumber String?       @unique
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  role        Role          @default(USER)
  Group       Group[]
  Trip        Trip[]
  Comment     Comment[]
  UserToTrip  UserToTrip[]
  UserToGroup UserToGroup[]
}

model Category {
  uuid  String @id @default(uuid())
  name  String @unique
  group Trip[]
}

enum Role {
  USER
  ADMIN
}

model Group {
  uuid          String        @id @default(uuid())
  title         String        @unique
  published     Boolean       @default(true)
  author        User          @relation(fields: [authorGroupId], references: [uuid])
  authorGroupId String
  views         Int           @default(0)
  likes         Int           @default(0)
  comments      Comment[]
  Trip          Trip[]
  UserToGroup   UserToGroup[]
}

model Trip {
  uuid         String       @id @default(uuid())
  title        String       @unique
  Place        String[]
  published    Boolean      @default(true)
  author       User         @relation(fields: [authorTripId], references: [uuid])
  authorTripId String
  attractions  String[]
  pictures     String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  DateofTrip   String?
  views        Int          @default(0)
  likes        Int          @default(0)
  Group        Group[]
  category     Category     @relation(fields: [categoryId], references: [uuid])
  comments     Comment[]
  UserToTrip   UserToTrip[]
  categoryId   String
}

model Comment {
  id        Int      @id @default(autoincrement())
  authorId  String
  comment   String
  author    User     @relation(fields: [authorId], references: [uuid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Trip      Trip?    @relation(fields: [tripId], references: [uuid])
  tripId    String?
  Group     Group?   @relation(fields: [groupId], references: [uuid])
  groupId   String?
}

model UserToTrip {
  userId String
  user   User   @relation(fields: [userId], references: [uuid])
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [uuid])

  @@id([userId, tripId])
}

model UserToGroup {
  userId  String
  user    User   @relation(fields: [userId], references: [uuid])
  groupId String
  group   Group  @relation(fields: [groupId], references: [uuid])

  @@id([userId, groupId])
}
